#排列组合
itertools.permutations(l: list, k: int) -> permutation object
# 返回以list内元素为元素，长度为n的所有排列可能
itertools.permutations(l = [1,2,3], k = 2) -> [1,2],[1,3],[2,1],[2,3],[3,1],[3,2]
# 与之相对应的
itertools.combinations(l: list, k: int)
# 返回以list内元素为元素，长度为n的所有组合可能
itertools.permutations(l = [1,2,3], k = 2) -> [1,2],[1,3],[2,3]

#洗牌shuffle
random.shuffle(l: list) -> void
# 将list里的元素进行就地随机排列，改变原始list
random.sample(l: list, k: int) -> list
# 从list里采样k个元素，作为列表返回，不改变原始list

#随机数
random.uniform(x: int, y: int) -> float n
# x <= n < y

# 栈和队列的实现
使用collecionts.deque()
# 相关操作
deque.pop(), popleft(), append(), appendleft(), insert(i, a)
# 相比较list，deque的pop操作时间复杂度更低

# 字符串拆分
list = s.split('@')
# 字符串拼接
s = str.join('@',list)

# 打包与解包
languages = ['Java', 'Python', 'JavaScript']
versions = [14, 3, 6]
result_list = list(zip(languages, versions))
# Output: [('Java', 14), ('Python', 3), ('JavaScript', 6)]
l, v = zip(*result_list)
# l = ['Java', 'Python', 'JavaScript']
# v = [14, 3, 6]

# 任何与全部
# any：只要有一个True就返回True
any([1,2,0]) #True, 因为有1和2True
# all: 只要有一个是False就返回False
all([1,2,0]) #False，因为0是False

# to count an object we could use collections.Counter()
# 比如计算字符串每个字符出现的次数
frequency = collections.Counter("mississippi")
# frequency == Counter({'i': 4, 's': 4, 'p': 2, 'm': 1})
